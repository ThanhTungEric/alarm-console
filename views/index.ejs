<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Data</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        /* CSS cho pagination */
        .page-button {
            display: inline-block;
            width: 30px;
            height: 30px;
            line-height: 30px;
            text-align: center;
            margin: 0 5px;
            background-color: #f1f1f1;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
        }

        .page-button.active {
            background-color: #1376d3;
            color: white;
            font-weight: bold;
        }

        .pagination {
            width: 90%;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header-container">
            <div class="logo-left">
                <p id="alarmStatus">Alarm: 0 / Normal: 0</p>
            </div>
            <h1>HISTORY ALARM</h1>
            <div class="logo-right">
                <img src="https://static.ybox.vn/2022/5/2/1653386529734-nguyen-hong-minh201866kj-avatar.png"
                    class="logo-img" alt="logo" />
            </div>
        </div>

        <div class="filter">
            <div class="filter-input">
                <input type="date" id="dateFilter" placeholder="Filter by date">
                <input type="month" id="monthFilter" placeholder="Filter by month">
                <input type="text" id="sensorFilter" placeholder="Filter by sensor">
                <div class="filter-btn">
                    <button id="filterBtn">Filter</button>
                </div>
            </div>
            <div class="filter-action">
                <button id="exportDateBtn" style="background-color: #1376d3;">Export</button>
                <button id="refreshBtn" style="background-color: #1376d3;">Refresh</button>
                <button id="gotoalarm" style="background-color: #1376d3;">Alarm console</button>
            </div>
        </div>

        <table id="dataTable">
            <thead>
                <tr>
                    <th>Sensor</th>
                    <th>State</th>
                    <th>Acknowledgment</th>
                    <th>Alarm class</th>
                    <th>Priority</th>
                    <th>Message</th>
                    <th>Timestamp</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="dataBody"></tbody>
        </table>

        <div class="container-pa">
            <div>
                <p>Page: <span id="currentPage">1</span> / <span id="totalPages">0</span></p>
            </div>
            <div class="pagination">
                <button id="prevPageBtn">Previous</button>
                <div id="pageButtons"></div>
                <button id="nextPageBtn">Next</button>
            </div>
        </div>

    </div>

    <script>
        const apiUrl = `http://${'<%= appName %>'}:3008/api/sensor`;
        let currentPage = 1;
        let totalPages = 0;

        document.getElementById('filterBtn').addEventListener('click', filterData);
        document.getElementById('prevPageBtn').addEventListener('click', () => changePage(-1));
        document.getElementById('nextPageBtn').addEventListener('click', () => changePage(1));
        document.getElementById('refreshBtn').addEventListener('click', () => fetchData(currentPage));
        document.getElementById('exportDateBtn').addEventListener('click', exportData);
        document.getElementById('gotoalarm').addEventListener('click', () => {
            window.location.href = '/pending';
        });

        function exportData() {
            const date = document.getElementById('dateFilter').value;
            const month = document.getElementById('monthFilter').value;
            const sensor = document.getElementById('sensorFilter').value;

            let url = `${apiUrl}/export`;

            // Thêm tham số vào URL dựa trên các bộ lọc
            if (date) {
                url += `?date=${date}`;
            } else if (month) {
                url += `?month=${month}`;
            } else if (sensor) {
                url += `?sensor=${sensor}`;
            }

            // Nếu không có bộ lọc nào, xuất tất cả dữ liệu
            if (!date && !month && !sensor) {
                window.open(url); // Xuất tất cả dữ liệu
            } else {
                window.open(url); // Xuất theo bộ lọc
            }
        }


        function fetchData(page) {
            const date = document.getElementById('dateFilter').value;
            const month = document.getElementById('monthFilter').value;
            const sensor = document.getElementById('sensorFilter').value;

            let url = `${apiUrl}?page=${page}`;

            if (date) {
                url += `&date=${date}`;
            } else if (month) {
                url += `&month=${month}`;
            }

            if (sensor) {
                url += `&sensor=${sensor}`;
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    renderTable(data);
                    renderPagination();
                    fetchAlarmStatus();
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        function fetchTotalPages() {
            const date = document.getElementById('dateFilter').value;
            const month = document.getElementById('monthFilter').value;
            const sensor = document.getElementById('sensorFilter').value;

            let url = `${apiUrl}/count`;

            if (date) {
                url += `?date=${date}`;
            } else if (month) {
                url += `?month=${month}`;
            }

            if (sensor) {
                url += `&sensor=${sensor}`;
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    totalPages = Math.ceil(data.total / 15); // Giả sử mỗi trang có 15 bản ghi
                    renderPagination();
                })
                .catch(error => console.error('Error fetching total pages:', error));
        }

        function fetchAlarmStatus() {
            fetch(`${apiUrl}/status/count`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('alarmStatus').innerText = `Alarm: ${data.totalpending || 0} / Normal: ${data.totalhide || 0}`;
                })
                .catch(error => console.error('Error fetching alarm status:', error));
        }

        function changePage(direction) {
            if ((direction === -1 && currentPage > 1) || (direction === 1 && currentPage < totalPages)) {
                currentPage += direction;
                fetchData(currentPage);
            }
        }

        function renderPagination() {
            const pageButtonsContainer = document.getElementById('pageButtons');
            pageButtonsContainer.innerHTML = ''; // Xóa các nút cũ trước khi render

            const maxVisiblePages = 5; // Số trang hiển thị xung quanh trang hiện tại
            const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            // Cập nhật số trang hiện tại trên giao diện
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;

            // Hiển thị trang đầu nếu không nằm trong dãy hiển thị
            if (startPage > 1) {
                appendPageButton(1);
                if (startPage > 2) {
                    appendEllipsis();
                }
            }

            // Hiển thị các trang trong dãy
            for (let i = startPage; i <= endPage; i++) {
                appendPageButton(i);
            }

            // Hiển thị trang cuối nếu không nằm trong dãy hiển thị
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    appendEllipsis();
                }
                appendPageButton(totalPages);
            }

            // Cập nhật trạng thái nút "Previous" và "Next"
            document.getElementById('prevPageBtn').disabled = currentPage === 1;
            document.getElementById('nextPageBtn').disabled = currentPage === totalPages || totalPages === 0;

            // Hàm thêm một nút trang
            function appendPageButton(pageNumber) {
                const button = document.createElement('span');
                button.textContent = pageNumber;
                button.classList.add('page-button');
                if (pageNumber === currentPage) {
                    button.classList.add('active');
                }
                button.addEventListener('click', () => {
                    currentPage = pageNumber;
                    fetchData(currentPage);
                    renderPagination();
                });
                pageButtonsContainer.appendChild(button);
            }

            // Hàm thêm dấu "..."
            function appendEllipsis() {
                const ellipsis = document.createElement('span');
                ellipsis.textContent = '...';
                ellipsis.classList.add('page-button');
                ellipsis.style.cursor = 'default';
                ellipsis.style.border = 'none';
                pageButtonsContainer.appendChild(ellipsis);
            }
        }

        function renderTable(data) {
            const dataBody = document.getElementById('dataBody');
            dataBody.innerHTML = '';

            data.forEach(item => {
                const row = document.createElement('tr');
                const formattedTimestamp = item.timestamp.replace('T', ' ').replace('.000Z', '');
                row.innerHTML = `
                    <td>${item.sensor}</td>
                    <td>${item.sensor_state}</td>
                    <td>${item.acknowledgment_state}</td>
                    <td>${item.alarm_class}</td>
                    <td>${item.priority}</td>
                    <td>${item.message}</td>
                    <td>${formattedTimestamp}</td>
                    <td>${item.status}</td>
                `;
                dataBody.appendChild(row);
            });
        }

        function filterData() {
            currentPage = 1;
            fetchData(currentPage);
            fetchTotalPages();
        }

        fetchData(currentPage);
        fetchTotalPages();
    </script>
</body>

</html>