<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Data</title>
    <link rel="stylesheet" href="/styles.css">
</head>

<body>
    <div class="container">
        <div class="header-container">
            <div class="logo-left"><p  id="alarmStatus">Alarm: 0 / Normal: 0</p></div>
            <h1>HISTORY ALARM</h1>
            <div class="logo-right">
                <img src="https://static.ybox.vn/2022/5/2/1653386529734-nguyen-hong-minh201866kj-avatar.png"
                    class="logo-img" alt="logo" />
            </div>
        </div>

        <div class="filter">
            <div class="filter-input">
                <input type="date" id="dateFilter" placeholder="Filter by date">
                <input type="month" id="monthFilter" placeholder="Filter by month">
                <input type="text" id="sensorFilter" placeholder="Filter by sensor">
                <div class="filter-btn">
                    <button id="filterBtn">Filter</button>
                </div>
            </div>
            <div class="filter-action">
                <button id="exportDateBtn" style="background-color: #1376d3;">Export</button>
                <button id="refreshBtn" style="background-color: #1376d3;">Refresh</button>
                <button id="gotoalarm" style="background-color: #1376d3;">Alarm console</button>
            </div>
        </div>

        <table id="dataTable">
            <thead>
                <tr>
                    <th>Sensor</th>
                    <th>State</th>
                    <th>Acknowledgment</th>
                    <th>Alarm class</th>
                    <th>Priority</th>
                    <th>Message</th>
                    <th>Timestamp</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="dataBody"></tbody>
        </table>

        <div class="container-pa">
            <div class="note"></div>
            <div class="pagination">
                <button id="prevPageBtn">Previous</button>
                <span id="pageInfo"></span> <span id="totalPagesInfoo"> /</span> <span id="totalPagesInfo"></span>
                <button id="nextPageBtn">Next</button>
            </div>
            <div class="note"></div>
        </div>
    </div>

    <!-- Modal cho xuất dữ liệu -->
    <div id="exportModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="closeModal">&times;</span>
            </div>
            <div class="export-date">
                <label for="exportDate">Select date:</label>
                <input type="date" id="exportDate">
            </div>
            <div class="export-month">
                <label for="exportMonth">Select month:</label>
                <input type="month" id="exportMonth">
            </div>
            <button id="confirmExportBtn">Export</button>
        </div>
    </div>

    <script>
        const apiUrl = `http://${'<%= appName %>'}:3008/api/sensor`;
        let currentPage = 1;
        let totalPages = 0;

        document.getElementById('filterBtn').addEventListener('click', filterData);
        document.getElementById('prevPageBtn').addEventListener('click', () => changePage(-1));
        document.getElementById('nextPageBtn').addEventListener('click', () => changePage(1));
        document.getElementById('exportDateBtn').addEventListener('click', openExportModal);
        document.getElementById('closeModal').addEventListener('click', closeExportModal);
        document.getElementById('confirmExportBtn').addEventListener('click', confirmExport);
        document.getElementById('refreshBtn').addEventListener('click', () => {
            fetchData(currentPage);
        });
        document.getElementById('gotoalarm').addEventListener('click', () => {
            window.location.href = '/pending';
        });

        function fetchData(page) {
            const date = document.getElementById('dateFilter').value;
            const month = document.getElementById('monthFilter').value;
            const sensor = document.getElementById('sensorFilter').value;

            let url = `${apiUrl}?page=${page}`;

            if (date) {
                url += `&date=${date}`;
            } else if (month) {
                url += `&month=${month}`;
            }

            if (sensor) {
                url += `&sensor=${sensor}`;
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    renderTable(data);
                    updatePageInfo(page);
                    checkPagination();
                    fetchAlarmStatus();
                });
        }


        function fetchTotalPages() {
            const date = document.getElementById('dateFilter').value;
            const month = document.getElementById('monthFilter').value;
            const sensor = document.getElementById('sensorFilter').value;

            let url = `${apiUrl}/count`;

            if (date) {
                url += `?date=${date}`;
            } else if (month) {
                url += `?month=${month}`;
            }

            if (sensor) {
                url += `&sensor=${sensor}`;
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const totalRecords = data.total || 0; // Đảm bảo totalRecords không phải là NaN
                    totalPages = Math.ceil(totalRecords / 15); // Giả sử mỗi trang có 15 bản ghi
                    document.getElementById('totalPagesInfo').textContent = totalPages; // Cập nhật tổng số trang
                    checkPagination();
                })
                .catch(error => console.error('Error fetching total pages:', error));
        }


        function fetchAlarmStatus() {
            fetch(`${apiUrl}/status/count`)
                .then(response => response.json())
                .then(data => {
                    const totalPending = data.totalpending || 0;
                    const totalHide = data.totalhide || 0;
                    document.getElementById('alarmStatus').innerText = `Alarm: ${totalPending} / Normal: ${totalHide}`;
                })
                .catch(error => console.error('Error fetching alarm status:', error));
        }

        function changePage(direction) {
            currentPage += direction;
            fetchData(currentPage);
        }

        function checkPagination() {
            document.getElementById('prevPageBtn').disabled = currentPage === 1;
            document.getElementById('nextPageBtn').disabled = currentPage === totalPages || totalPages === 0;
        }

        function updatePageInfo(page) {
            document.getElementById('pageInfo').textContent = `Page ${page}`;
            document.getElementById('totalPagesInfo').textContent = totalPages;
        }

        function renderTable(data) {
            const dataBody = document.getElementById('dataBody');
            dataBody.innerHTML = '';

            data.forEach(item => {
                const row = document.createElement('tr');
                let formattedTimestamp = item.timestamp.replace('T', ' ').replace('.000Z', '');
                row.innerHTML = `
                    <td>${item.sensor}</td>
                    <td>${item.sensor_state}</td>
                    <td>${item.acknowledgment_state}</td>
                    <td>${item.alarm_class}</td>
                    <td>${item.priority}</td>
                    <td>${item.message}</td>
                    <td>${formattedTimestamp}</td>
                    <td>${item.status}</td>
                `;
                dataBody.appendChild(row);
            });
        }

        function filterData() {
            currentPage = 1;
            fetchData(currentPage);
            fetchTotalPages();
        }

        function openExportModal() {
            document.getElementById('exportModal').style.display = 'block';
        }

        function closeExportModal() {
            document.getElementById('exportModal').style.display = 'none';
        }

        function confirmExport() {
            const date = document.getElementById('exportDate').value;
            const month = document.getElementById('exportMonth').value;

            if (date) {
                window.open(`${apiUrl}/export?date=${date}`);
            } else if (month) {
                window.open(`${apiUrl}/export?month=${month}`);
            } else {
                alert('Vui lòng chọn ngày hoặc tháng để xuất dữ liệu.');
            }

            closeExportModal();
        }

        fetchData(currentPage);
        fetchTotalPages();

        setInterval(() => {
            fetchData(currentPage);
            fetchTotalPages();
        }, 5000);

        window.onclick = function (event) {
            const modal = document.getElementById('exportModal');
            if (event.target === modal) {
                closeExportModal();
            }
        };
    </script>
</body>

</html>